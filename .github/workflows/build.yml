# This is a basic workflow to help you get started with Actions

name: CI

on:
  workflow_dispatch:
  repository_dispatch:
    types: [new-version]  
  push:    
    paths:
      - '.github/workflows/build.yml'
      - 'version.txt'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Prepare 
      if: success()
      id: prepare
      run: |
        VERSION=$(cat version.txt)
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm64
        echo ::set-output name=server_image::docker.io/${{ secrets.DOCKER_USERNAME }}/temporalio-web
        echo ::set-output name=hash::${GITHUB_SHA}
        echo ::set-output name=pre-release::false

    - uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Run build script
      run: |
       ./build.sh

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all      
      
    - name: Set up Docker Buildx      
      uses: docker/setup-buildx-action@v1
          
    - name: Log into registry
      if: success()
      run: echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build server image
      run: |
        V1=$(echo "${{ steps.prepare.outputs.version }}" | sed -e 's/^v//' | sed -e 's/-.*$//')
        V2=$(echo "${{ steps.prepare.outputs.version }}" | sed -e 's/-.*$//')
        docker buildx build \
          --output type=image,name=${{ steps.prepare.outputs.server_image }},push=true \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --tag "${{ steps.prepare.outputs.server_image }}:$V1" \
          --tag "${{ steps.prepare.outputs.server_image }}:${{ steps.prepare.outputs.hash }}" \
          --tag "${{ steps.prepare.outputs.server_image }}:latest" \
          --file Dockerfile .

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.prepare.outputs.version }}
        release_name: Release ${{ steps.prepare.outputs.version }}
        draft: false
        prerelease: ${{ steps.prepare.outputs.prerelease }}
